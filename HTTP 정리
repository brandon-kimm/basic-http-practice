# HTTP 웹 기본지식

- IP 의 특징

 패킷이라는 단위로 메세지를 전달한다.

- IP 의 문제점

비연결성(받을대상이없어도 보낸다) / 비신뢰성(순서변경, 패킷소실) / 프로그램 구분 (동일 IP 여러포트) 이라는 문제 가 생긴다

- 인터넷 프로토콜 4계층

애플리케이션계층(HTTP / FTP)

전송계층(TCP / UDP)

인터넷계층(IP)

네트워크 인터페이스계층

IP는 출발지/목적지/기타..정도였다면

- TCP(Transmission Controll Protocol) 연결지향 - TCP 3 way handshake (가상연결)

(1)Client = Syn / (2)Server = Syn+Ack /  (3)Client = Ack

- TCP 특징

데이터전달보증 / 순서보장 / 신뢰할 수 있는 프로토콜 / 현재는 대부분 TCP사용

- UDP 특징 (User Datagram Protocol)

IP 와 특징은 같고 Port 와 CheckSum 이 추가되었고 핸드쉐이크과정이 없으니까 좀 빠르다. (하얀도화지)

 * HTTP3 가 나오면서 빠르다는 이유로 좀 각광받고있음.

- DNS (Domain Name System)

도메인명(google.co.kr) 과 IP (10.45.13.55)를 테이블로 관리하는 시스템

Uniform : 리소스를 식별하는 통일된 방식

- URI (Resource Identifier) = URL(Resource Locator) + URN(Resource Name)  더 넓은관점이다.

### 웹브라우저에서 구글을 [www.google.com](http://www.google.com) 을 쳤을 때 생기는 일

https://www.google.com:443/search?q=hello&hl=ko 

1. 웹 브라우저가 HTTP 요청메세지 생성

GET /search?q=hello&hl=ko HTTP/1.1

Host: www.google.com

1. Socket  라이브러리가 TCP/IP 연결 (IP/PORT) / 데이터전달
2. HTTP 메세지에 추가로 TCP/IP 패킷생성(출발지IP/도착지IP)
3. HTTP 응답메세지

HTTP/1.1 200OK

Content-Type: ...

Content-Length: ...

<html> <body> HELLO </body></html>

1. 웹 브라우저가 HTML 렌더링

---

HTTP (HyperText Transfer Protocol)

- HTML / TEXT / IMAGE / VOICE / JSON / XML / Server to Server  모든 것을 HTTP로 통신
- Client - Server 구조
- StateFul (서버가 클라이언트의 이전 상태(컨텍스트)를 기억한다.)
- Stateless (상태가 없기때문에 서버증설에 굉장히 유리) - 로그인같은 영역은 상태유지가 최소로 사용.
- 비연결성 (1시간동안 수천명이 서비스를 사용해도 실서버의 동시처리는 수십개에 불과)

극복방법 → 지속연결 (Persistent Connections)

- HTTP 메세지구조

---

### HTTP API 설계

회원을 조회해라는 리소스가 아니다 “회원"이 리소스이다. 회원이라는 리소스를 URI에 매핑만 하면된다.

***리소스(명사)와 행위(동사)를 분리하자***

회원조회목록 - /read-member-list(x)  - GET /members(o)

회원조회 - /read-member-by-id(x) -    GET /members/{id}(o)

회원등록 - /create-member(x) -           POST /members(o)  - ***201 / Location 정보 추가해서 응답***

회원수정 - /update-member(x) -          PATCH, PUT, POST /members/{id}(o)

회원삭제 - /delete-member(x) -           DELETE /members/{id}(o)

* Control URI - POST /orders/{orderId}/start-delivery (프로세스의 상태가 변경되거나 GET으로 안될 때)

* PUT - 리소스를 대체하거나 없으면 생성 (MERGE INTO) POST와는 다르게 리소스의 위치로 요청한다! 

리소스를 “완전히" 대체한다는 것! username 이 기존에 있어도 age만 PUT 날리면 username이 null..됨..

* PATCH - PUT과 같은 개념이지만 “완전히" 대체되지않고 “부분적”으로 대체 username 그대로 지켜짐

---

### HTTP 메서드의 속성

- 안전

호출해도 “리소스” 를 변경하지않는다 (GET) 

- 멱등 (자동복구메커니즘에 활용)

f(f(x)) = f(x) / 1번호출해도 10번호출해도 결과는 똑같아야 된다. (GET / PUT / DELETE)

* PATCH 는{ "operation": "add", "age": 10"} 이런거 날리면 age = age + 10 이라서 멱등아님. 

- 캐시가능

이론적은로는 GET HEAD POST PATCH 가능 실제로는 ***GET*** HEAD만 사용 POST의 바디를 키로 잡는게..음..

---

### 클라이언트 → 서버 데이터전송하는 케이스

- 정적데이터조회

이미지, 정적텍스트문서 - (GET /static/star.jpg HTTP/1.1)

- 동적데이터조회

검색, 게시판목록에서 정렬필터(검색어) - GET /search?q=hello&hl=ko

- HTML Form 을 통한 데이터전송  - 회원가입, 상품주문, 데이터변경

HTML FORM으로 <form action=”/save” method=”post”> 

**POST /save HTTP/1.1**

**Host: localhost:8080**

**Content-Type: application/x-www-form-urlencoded**

(Enter)

**username=tiger&age=20**

HTML FORM으로 <form action=”/save” method=”multipart/form-data”> 

- HTTP API를 통한 데이터전송

회원가입, 상품주문,데이터변경, 서버→서버, 앱클라이언트, 웹클라이언트

POST /members HTTP/1.1

Content-Type: application/json

(Enter)

{

   “username”:”young”,

   “age”:20

}

---

### HTTP API 설계예시

클라이언트가 직접 리소스의 URI를 관리한다 = PUT ⇒ 클라이언트가 관리하는 Store 개념에서 용이

클라이언트는 등록될 리소스의 URI를 모른다 = POST (등록 후 Loacation 정보 응답받음)

 * 대부분 POST를 사용한다.

회원등록폼 /members/new → GET

회원등록 /members/new → POST  (추천!)

회원삭제 /members/{id}/delete → POST (Control URI)

***HTTP메소드(PUT/PATCH/DELETE)를 사용할 수 없을때, /new /edit /delete Control URI 사용 (동사!!)***

---

### HTTP  상태코드

- 1xx(Informational) - 요청이 수신되어 처리중
- 2xx(Successful) - 요청 정상처리
- 3xx(Redirect) - 요청을 완료하려면 추가행동이 필요
- 4xx(Client Error)  - 클라이언트 오류, 잘못된 문법등으로 서버가 요청을 수행할 수 없음
- 5xx(Server Error)- 서버오류, 서버가 정상 요청을 처리하지못함

- 2xx Success

***200 OK - 평범한 성공***

201 Created - Location 헤더 있을 수 도 있다.

202 Accepted - 배치처리 같은 곳에서 사용 요청 접수 후 1시간 뒤에 배치프로세스가 요청 처리

204 No Content - 서버가 요청을 성공적으로 수행했지만, 응답 페이로드 본문에 보낼 데이터가 없음

                              (웹문서 save 버튼)

- 3xx Redirection

300 Multiple Choices

301 Moved Permanently

302 Found

303 See Other

304 Not Modified

307 Temporary Redirect

304 Permanent Redirect
